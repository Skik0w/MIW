import numpy as np
from itertools import combinations
from collections import defaultdict


def find_covering_rules(data):
    """Znajduje reguły pokrywające obiekty w systemie decyzyjnym."""
    num_attributes = data.shape[1] - 1  # Ostatnia kolumna to decyzja
    decision_attr = num_attributes
    rules = defaultdict(int)  # Słownik przechowujący reguły i liczbę ich wystąpień
    remaining_objects = list(range(data.shape[0]))  # Indeksy obiektów

    row_num = 1
    while remaining_objects:
        objects_to_remove = []

        for obj_index in remaining_objects:
            obj = data[obj_index]
            obj_decision = obj[decision_attr]

            rule_length = 1 if row_num == 1 else 2

            for attr_comb in combinations(range(num_attributes), rule_length):
                rule_conditions = tuple((attr, obj[attr]) for attr in attr_comb)
                mask = np.all([data[:, attr] == value for attr, value in rule_conditions], axis=0)

                if np.all(data[mask, decision_attr] == obj_decision):
                    rules[(rule_conditions, obj_decision)] += 1
                    objects_to_remove.append(obj_index)
                    break

        remaining_objects = [obj for obj in remaining_objects if obj not in objects_to_remove]
        row_num += 1

    # Wypisanie unikalnych reguł wraz z ich liczbą wystąpień
    for (rule_conditions, decision), count in rules.items():
        rule_str = " ∧ ".join(f"(a{attr + 1} = {value})" for attr, value in rule_conditions)
        print(f"{rule_str} => (d = {decision})")

    return rules


# Przykładowe dane (numpy array)
data = np.array([
    [1, 1, 1, 1, 3, 1, 1],
    [1, 1, 1, 1, 3, 2, 1],
    [1, 1, 1, 3, 2, 1, 0],
    [1, 1, 1, 3, 3, 2, 1],
    [1, 1, 2, 1, 2, 1, 0],
    [1, 1, 2, 1, 2, 2, 1],
    [1, 1, 2, 2, 3, 1, 0],
    [1, 1, 2, 2, 4, 1, 1]
])

rules = find_covering_rules(data)